{"version":3,"sources":["Views/MainPage/Header.js","Views/MainPage/Footer.js","Views/MainPage/Body.js","Views/MainPage/More.js","Views/MainPage/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","HeaderContainer","MainBox","Logo","href","LinkBox","Link","SignUp","styled","div","a","Footer","FooterContainer","Body","BodyContainer","More","MoreContainer","index","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"68DAsBeA,MApBf,WACE,OACE,kBAAC,WAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAMC,KAAK,MACX,kBAACC,EAAD,KACE,kBAACC,EAAD,MACA,kBAACA,EAAD,qDACA,kBAACA,EAAD,oDACA,kBAACA,EAAD,2BACA,kBAACA,EAAD,2BACA,kBAACC,EAAD,uCASNA,EAASC,IAAOC,IAAV,KAoBNH,EAAOE,IAAOC,IAAV,KAgBJJ,EAAUG,IAAOC,IAAV,KAOPN,EAAOK,IAAOE,EAAV,KASJT,EAAkBO,IAAOC,IAAV,KAQfP,EAAUM,IAAOC,IAAV,K,iKCzEEE,MARf,WACE,OACE,kBAAC,WAAD,KACE,kBAACC,EAAD,QAOAA,EAAkBJ,IAAOC,IAAV,K,oKCFNI,MARf,WACE,OACE,kBAAC,WAAD,KACE,kBAACC,EAAD,QAOAA,EAAgBN,IAAOC,IAAV,K,8LCFJM,MARf,WACE,OACE,kBAAC,WAAD,KACE,kBAACC,EAAD,QAMAA,EAAgBR,IAAOC,IAAV,KCKJQ,MAXf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDSC,MARf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,QCOcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.42c9a79e.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nfunction Header() {\n  return (\n    <Fragment>\n      <HeaderContainer>\n        <MainBox>\n          <Logo href=\"/\" />\n          <LinkBox>\n            <Link></Link>\n            <Link>숙소 호스트 되기</Link>\n            <Link>체험 호스팅하기</Link>\n            <Link>도움말</Link>\n            <Link>로그인</Link>\n            <SignUp>회원 가입</SignUp>\n          </LinkBox>\n        </MainBox>\n      </HeaderContainer>\n    </Fragment>\n  );\n}\n\nexport default Header;\nconst SignUp = styled.div`\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 42px;\n  min-width: 20px;\n  border-radius: 22px;\n  border: 1px solid #f7f7f7;\n  font-size: 14px;\n  font-weight: bold;\n  color: #222222;\n  padding: 0 15px;\n  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.18);\n  &:hover {\n    box-shadow: 1px 4px 4px rgba(0, 0, 0, 0.13);\n    transition: box-shadow 0.2s ease;\n  }\n`;\n\nconst Link = styled.div`\n  cursor: pointer;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 42px;\n  min-width: 20px;\n  border-radius: 22px;\n  font-size: 14px;\n  font-weight: bold;\n  padding: 0 15px;\n  color: #222222;\n  &:hover {\n    background-color: #f7f7f7;\n  }\n`;\nconst LinkBox = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  min-width: 500px;\n`;\nconst Logo = styled.a`\n  cursor: pointer;\n  height: 64px;\n  width: 118px;\n  background-image: url(\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/69/Airbnb_Logo_B%C3%A9lo.svg/1024px-Airbnb_Logo_B%C3%A9lo.svg.png\");\n  background-size: 100% auto;\n  background-position: center;\n  background-repeat: no-repeat;\n`;\nconst HeaderContainer = styled.div`\n  height: 80px;\n  width: 100%;\n  border: 2px dashed red;\n  box-sizing: border-box;\n  padding: 0px 80px;\n`;\n\nconst MainBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  height: 100%;\n  width: auto;\n`;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nfunction Footer() {\n  return (\n    <Fragment>\n      <FooterContainer></FooterContainer>\n    </Fragment>\n  );\n}\n\nexport default Footer;\n\nconst FooterContainer = styled.div`\n  height: 430px;\n  width: 100%;\n  border: 2px dashed green;\n  box-sizing: border-box;\n`;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nfunction Body() {\n  return (\n    <Fragment>\n      <BodyContainer></BodyContainer>\n    </Fragment>\n  );\n}\n\nexport default Body;\n\nconst BodyContainer = styled.div`\n  min-height: 600px;\n  width: 100%;\n  border: 2px dashed blue;\n  box-sizing: border-box;\n`;\n","import React, { Fragment } from \"react\";\nimport styled from \"styled-components\";\nfunction More() {\n  return (\n    <Fragment>\n      <MoreContainer></MoreContainer>\n    </Fragment>\n  );\n}\n\nexport default More;\nconst MoreContainer = styled.div`\n  height: 58px;\n  width: 100%;\n  background-color: #f7f7f7;\n  border: 2px dashed black;\n  box-sizing: border-box;\n`;\n","import React, { Fragment } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Body from \"./Body\";\nimport More from \"./More\";\nfunction index() {\n  return (\n    <Fragment>\n      <More />\n      <Header />\n      <Body />\n      <Footer />\n    </Fragment>\n  );\n}\n\nexport default index;\n","import React, { Fragment } from \"react\";\nimport Mainpage from \"./Views/MainPage\";\nfunction App() {\n  return (\n    <Fragment>\n      <Mainpage />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}